@inherits LayoutComponentBase
@layout CommunicationsApp.Components.Layout.MainLayout

@inject NavigationManager NavigationManager

@attribute [Authorize]

<FluentStack Id="ServerLayoutOuterVertical" Orientation="Orientation.Vertical" 
    Style="flex-grow: 1; overflow: hidden;">
    <FluentStack Id="ServerLayoutOuterHorizontal" HorizontalGap="0" Style="flex-grow: 1; overflow: hidden;">
        <FluentStack Id="ServerLayoutChannelList" Orientation="Orientation.Vertical"
                     Style="align-self: stretch; flex-grow: 1; width: 30em; overflow-y: auto;">
            <ChannelList ServerId="@ServerId" />
        </FluentStack>
        <FluentBodyContent>
            <FluentStack Orientation="Orientation.Vertical" Class="content" VerticalGap="0"
                Style="border-left: solid; border-width: 0.1em; overflow: hidden;">
                @Body
            </FluentStack>
        </FluentBodyContent>
    </FluentStack>
</FluentStack>

@code {
    private string? currentUrl;
    public string? ServerId { get; set; }
    public LoadingState LoadingState { get; set; } = new();

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var serverAndChannelId = currentUrl.Substring(currentUrl.IndexOf('/') + 1);
        ServerId = serverAndChannelId.Split('/')[0];

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
