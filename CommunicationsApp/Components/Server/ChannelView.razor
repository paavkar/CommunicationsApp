@page "/channels/{ServerId}/{ChannelId}"
@rendermode InteractiveServer

@inject IServerService ServerService
@inject IJSRuntime JS

@if (Server is not null && Channel is not null)
{
    <PageTitle>CA | #@Channel.Name | @Server.Name</PageTitle>
    <FluentStack 
        Style="position: sticky;
                top: 0em;
                min-height: 4em;
                background: green;
                align-items: center;">
        <FluentLabel style="margin-left: 1em;">
            #@Channel!.Name @Channel!.Description
        </FluentLabel>
    </FluentStack>
    
    <FluentStack Orientation="Orientation.Vertical" Style="flex-grow: 1;">
        @if (!Channel!.Messages.Any())
        {
            <div style="margin-top: 1em; width: 100%;">
                <span style="margin-left: 1em;">No messages in the channel @Channel.Name</span>
                <hr />

            </div>
        }
        <FluentStack Orientation="Orientation.Vertical" Style="flex-grow: 1;">
            @foreach (var message in Channel!.Messages)
            {
                    <FluentStack>
                        <FluentPersona
                            ImageUrl="@message.Sender.ProfilePictureUrl"
                            Size="PersonaSize.Size32"
                            Presence="PersonaPresence.Online"></FluentPersona>
                        <FluentStack Orientation="Orientation.Vertical">
                            <FluentStack>
                                <FluentLabel>@message.Sender.DisplayName</FluentLabel>
                                <FluentLabel>@message.SentAt</FluentLabel>
                            </FluentStack>
                            <FluentLabel>@message.Content</FluentLabel>
                        </FluentStack>
                    </FluentStack>
            }
        </FluentStack>
    </FluentStack>
    <FluentStack Style="height: 5em; position: relative; width: 100%;">

        <FluentTextArea @bind-Value="NewMessage.Content"
                         Placeholder="Type your message here..."
                         Style="width: 100%;" Maxlength="400" />
        <FluentButton Style="position: absolute; right: 0.5em; bottom: 1em; background: transparent; border: none;">
            <FluentIcon Value="@(new Size20.Send())" />
        </FluentButton>
    </FluentStack>
}

@code {
    [Parameter]
    public string? ServerId { get; set; }
    [Parameter]
    public string? ChannelId { get; set; }
    public Server? Server { get; set; }
    public Channel? Channel { get; set; }
    public ChatMessage NewMessage { get; set; } = new();
    public string? UserId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(ChannelId) && !string.IsNullOrEmpty(ServerId))
            {
                UserId = await JS.InvokeAsync<string>("localStorageHelper.getItem", "userId");
                Server = await ServerService.GetServerByIdAsync(ServerId, UserId);
                if (Server == null)
                {
                    return;
                }
                Channel = Server?.ChannelClasses.SelectMany(cc => cc.Channels).FirstOrDefault(c => c.Id == ChannelId);
                if (Channel == null)
                {
                    return;
                }
                NewMessage.Channel = Channel;
                NewMessage.Sender = Server!.Members.FirstOrDefault(m => m.UserId == UserId)!;
                NewMessage.PartitionKey = $"ChatMessage-{Server.Id}";
            }

            StateHasChanged();
        }
    }
}
