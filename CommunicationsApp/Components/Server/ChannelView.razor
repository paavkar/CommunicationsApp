@implements IDisposable
@page "/channels/{ServerId}/{ChannelId}"
@rendermode InteractiveServer

@inject IServerService ServerService
@inject IJSRuntime JS
@inject ChatHubService ChatHubService
@inject UnreadService UnreadService

@if (Server is not null && Channel is not null)
{
    <PageTitle>@TitleString</PageTitle>
    <FluentStack HorizontalGap="4"
        Style="position: sticky;
                top: 0em;
                min-height: 4em;
                background: green;
                align-items: center;">
        <FluentLabel Style="margin-left: 0.5em; font-size: 1.8em;">#</FluentLabel>
        <FluentLabel Weight="FontWeight.Bold">
            @Channel!.Name
        </FluentLabel>
        <FluentLabel>•</FluentLabel>
        <FluentLabel Style="font-size: 0.9em;">@Channel!.Description</FluentLabel>
    </FluentStack>
    
    <FluentStack Orientation="Orientation.Vertical" Style="flex-grow: 1;">
        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
            <FluentLabel Weight="FontWeight.Bold"
                Typo="Typography.Subject"
                Alignment="HorizontalAlignment.Center">
                Welcome to channel #@Channel.Name!
            </FluentLabel>
            <FluentLabel>
                This is where the fun begins
            </FluentLabel>
        </FluentStack>
        <FluentStack Orientation="Orientation.Vertical" Style="flex-grow: 1;">
            @foreach (var message in Channel!.Messages)
            {
                <FluentStack>
                    <FluentCard>
                        <FluentStack>
                            <FluentPersona Image="@message.Sender.ProfilePictureUrl"
                                           ImageSize="50px"
                                           Status="PresenceStatus.Available">
                            </FluentPersona>
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentStack>
                                    <FluentLabel Weight="FontWeight.Bold" Style="font-size: 1.1em;">
                                        @message.Sender.DisplayName
                                    </FluentLabel>
                                    <FluentLabel Style="font-size: 0.9em;">
                                        @message.SentAt.AddHours(TimeZoneOffset).ToString("dd.MM.yyy HH:mm")
                                    </FluentLabel>
                                </FluentStack>
                                <FluentLabel>@message.Content</FluentLabel>
                            </FluentStack>
                        </FluentStack>
                    </FluentCard>
                </FluentStack>
            }
        </FluentStack>
    </FluentStack>
    <FluentStack Style="height: 5em; position: relative; width: 100%;">
        <FluentTextArea @bind-Value="NewMessage.Content"
                         Placeholder="Type your message here..."
                         Style="width: 100%;" Maxlength="400" />
        <FluentButton OnClick="SendMessageAsync"
            Style="position: absolute; right: 0.5em; bottom: 1em; background: transparent; border: none;">
            <FluentIcon Value="@(new Size20.Send())" />
        </FluentButton>
    </FluentStack>
}

@code {
    [Parameter]
    public string? ServerId { get; set; }
    [Parameter]
    public string? ChannelId { get; set; }
    public Server? Server { get; set; }
    public Channel? Channel { get; set; }
    public ChatMessage NewMessage { get; set; } = new();
    public string? UserId { get; set; }
    public int TimeZoneOffset { get; set; }
    public string TitleString { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        ChatHubService.ChannelMessageReceived += OnChannelMessageReceived;
        if (!string.IsNullOrEmpty(ChannelId))
        {
            UnreadService.ClearUnreadCount(ChannelId);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        UserId = await JS.InvokeAsync<string>("localStorageHelper.getItem", "userId");
        TimeZoneOffset = await JS.InvokeAsync<int>("timeZoneHelper.getTimeZone");
        if (firstRender)
        {
            if (string.IsNullOrEmpty(ServerId) || string.IsNullOrEmpty(ChannelId))
            {
                return;
            }
            Server = await ServerService.GetServerByIdAsync(ServerId, UserId);
            if (Server == null)
            {
                return;
            }
            Channel = Server?.ChannelClasses.SelectMany(cc => cc.Channels).FirstOrDefault(c => c.Id == ChannelId);
            if (Channel == null)
            {
                return;
            }
            TitleString = $"CA | #{Channel.Name} | {Server.Name}";
            Channel.Messages ??= [];

            StateHasChanged();
        }
    }

    private async void OnChannelMessageReceived(string serverId, string channelId, ChatMessage message)
    {
        // Only update if the message is for the currently viewed channel.
        if (Channel != null && channelId == Channel.Id)
        {
            Channel.Messages.Add(message);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SendMessageAsync()
    {
        if (string.IsNullOrWhiteSpace(NewMessage.Content))
            return;
        if (string.IsNullOrEmpty(ServerId) || string.IsNullOrEmpty(ChannelId) || Channel == null)
            return;

        NewMessage.Id = Guid.CreateVersion7().ToString();
        NewMessage.SentAt = DateTimeOffset.UtcNow;
        NewMessage.PartitionKey = $"ChatMessage-{ServerId}";
        NewMessage.Channel = Channel;
        NewMessage.Sender = Server!.Members.FirstOrDefault(m => m.UserId == UserId)!;

        await ChatHubService.SendMessageAsync(ServerId, ChannelId, NewMessage);

        NewMessage = new();
    }

    public void Dispose()
    {
        ChatHubService.ChannelMessageReceived -= OnChannelMessageReceived;
    }
}