@implements IDisposable
@page "/channels/{ServerId}/{ChannelId}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IStringLocalizer<CommunicationsAppLoc> Localizer
@inject CommunicationsHubService ChatHubService
@inject NavigationManager NavigationManager
@inject ICosmosDbService CosmosDbService
@inject AuthenticationStateProvider ASP
@inject IServerService ServerService
@inject IToastService ToastService
@inject IMediaService MediaService
@inject ILogger<ChannelView> Logger
@inject IJSRuntime JS

@if (IsLoading)
{
    <FluentStack Style="width: 100%; height: 100%; justify-content: center; align-items: center;">
        <FluentProgressRing></FluentProgressRing>
    </FluentStack>
}
else
{
    if (Server is not null && Channel is not null)
    {
        if (Permissions.Any(p => p.PermissionType == ServerPermissionType.DisplayChannels) || UserId == Server.OwnerId)
        {
            <FluentStack HorizontalGap="4"
                         Style="position: sticky;
                                top: 0em;
                                min-height: 4em;
                                border-bottom: solid 0.1em;
                                align-items: center;
                                z-index: 1;
                                justify-content: space-between;">
                <FluentStack HorizontalGap="4">
                    <FluentLabel Style="margin-left: 0.5em; font-size: 1.8em;">#</FluentLabel>
                    <FluentLabel Weight="FontWeight.Bold">
                        @Channel!.Name
                    </FluentLabel>
                    <FluentLabel>•</FluentLabel>
                    <FluentLabel Style="font-size: 0.9em;">@Channel!.Description</FluentLabel>
                </FluentStack>
                <FluentButton BackgroundColor="rgba(0,0,0,0)" Id="btnDisplayMemberList"
                              OnClick="@(() => DisplayMemberList = !DisplayMemberList)"
                              Style="justify-self: flex-end;">
                    <FluentIcon Value="@(new Size24.PeopleCommunity())" Slot="start" />
                    <FluentTooltip Anchor="btnDisplayMemberList" Position="TooltipPosition.Left">
                        @(DisplayMemberList? Localizer["HideMemberList"] : Localizer["DisplayMemberList"])
                    </FluentTooltip>
                </FluentButton>
            </FluentStack>

            <FluentStack Style="flex-grow: 1; overflow: hidden; width: 100%;" HorizontalGap="0">
                <FluentStack Orientation="Orientation.Vertical" Style="flex-grow: 1; height: 100%;" VerticalGap="0">
                    <FluentStack Orientation="Orientation.Vertical" Style="height: 100%; overflow-y: auto;"
                                 Id="channelMessageView">
                        <FluentStack Orientation="Orientation.Vertical"
                                     HorizontalAlignment="HorizontalAlignment.Center"
                                     Style="margin-top: 1em;">
                            <FluentLabel Weight="FontWeight.Bold"
                                         Typo="Typography.Subject"
                                         Alignment="HorizontalAlignment.Center">
                                @Localizer["WelcomeToChannel"] #@Channel.Name!
                            </FluentLabel>
                            <FluentLabel>
                                This is where the fun begins
                            </FluentLabel>
                        </FluentStack>
                        <FluentStack Orientation="Orientation.Vertical" Style="flex-grow: 1;">
                            @foreach (var message in Channel!.Messages)
                            {
                                var displayNameId = $"senderDisplayName-{message.Id}";
                                var popoverId = $"popover-{message.Id}";

                                <FluentStack>
                                    <FluentPopover AnchorId=@displayNameId
                                                   Open="@(OpenPopoverId == popoverId)"
                                                   OpenChanged="@((bool isOpen) => OnPopoverOpenChanged(popoverId, isOpen))"
                                                   Style="width: 300px; border-radius: 0.5em;"
                                                   VerticalPosition="VerticalPosition.Top" VerticalThreshold="200">
                                        <Body>
                                            <ProfileCard Profile="@message.Sender" />
                                        </Body>
                                    </FluentPopover>
                                    <FluentCard Style="border-radius: 0; padding: 10px;">
                                        <FluentStack>
                                            <FluentPersona Image="@(!string.IsNullOrWhiteSpace(message.Sender.ProfilePictureUrl)
                                                                    ? message.Sender.ProfilePictureUrl
                                                                    : new Size48.Person().ToDataUri(size: "25px", color: "white"))"
                                                           ImageSize="50px"
                                                           Status="PresenceStatus.Available">
                                            </FluentPersona>
                                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
                                                <FluentStack>
                                                    <FluentLabel Id=@displayNameId Weight="FontWeight.Bold"
                                                                 Style="font-size: 1.1em; cursor: pointer;"
                                                                 @onclick="() => OnPopoverOpenChanged(popoverId, OpenPopoverId != popoverId)">
                                                        @message.Sender.DisplayName
                                                    </FluentLabel>
                                                    <FluentLabel Style="font-size: 0.9em;">
                                                        @message.SentAt.AddHours(TimeZoneOffset).ToString("dd.MM.yyy HH:mm")
                                                    </FluentLabel>
                                                </FluentStack>
                                                <FluentLabel Style="white-space: pre-wrap;">
                                                    @message.Content
                                                </FluentLabel>
                                            </FluentStack>
                                        </FluentStack>
                                    </FluentCard>
                                </FluentStack>
                            }
                            <FluentStack Id="endOfMessages" Style="height: 5px;" />
                        </FluentStack>
                    </FluentStack>

                    <FluentInputFile @ref="@MessageFileUpload" Style="display: none;"
                                     AnchorId="MessageFileUploadButton"
                                     OnCompleted="OnCompleted" Multiple MaximumFileCount="@MaxFileCount"
                                     OnFileCountExceeded="OnFileCountExceeded"
                                     OnFileUploaded="OnFileUploaded"
                                     OnProgressChange="OnFileProgress"
                                     MaximumFileSize="@(100 * 1024 * 1024)"
                                     Mode="InputFileMode.Buffer" />

                    <FluentProgress Visible="@(UploadPercentage > 0)" Min="0" Max="100" Value="@UploadPercentage"
                                    Style="height: 1em; width: 10em;" />
                    @if (UploadPercentage > 0)
                    {
                        <FluentLabel>@UploadPercentage %</FluentLabel>
                        <FluentLabel>@UploadTitle</FluentLabel>
                    }

                    <FluentStack Style="position: relative; width: 100%; position: sticky; bottom: 0;
                                        align-self: start; padding-bottom: 1em;" Id="textAreaStack">
                        <div class="fluent-textarea-wrapper">
                            <div class="fluent-icon-group">
                                <FluentButton Id="MessageFileUploadButton"
                                    Disabled="@(!Permissions.Any(
                                                p => p.PermissionType == ServerPermissionType.SendMessages) &&
                                                UserId != Server.OwnerId)"
                                              Appearance="Appearance.Stealth">
                                    <FluentIcon Value="@(new Size20.Add())" />
                                </FluentButton>
                            </div>
                            <textarea @bind="NewMessage.Content"
                                      placeholder="@($"{Localizer["SendMessage"]} #{Channel.Name}")"
                                      class="fluent-textarea"
                                      @ref=NewMessageRef
                                      @oninput=AutoGrow
                                      disabled="@(!Permissions.Any(
                                                p => p.PermissionType == ServerPermissionType.SendMessages) &&
                                                UserId != Server.OwnerId)"
                                      maxlength="400">
                            </textarea>
                            <div class="fluent-icon-group">
                                <FluentButton
                                              Disabled
                                              Appearance="Appearance.Stealth">
                                    <FluentIcon Value="@(new Size20.EmojiSmileSlight())" />
                                </FluentButton>
                                <FluentButton
                                              Disabled
                                               Appearance="Appearance.Stealth">
                                    <FluentIcon Value="@(new Size20.Gif())" />
                                </FluentButton>
                                <FluentButton OnClick="SendMessageAsync"
                                              Disabled="@((!Permissions.Any(
                                                   p => p.PermissionType == ServerPermissionType.SendMessages) &&
                                                   UserId != Server.OwnerId) || FileUploadInProcess)"
                                              Appearance="Appearance.Stealth">
                                            <FluentIcon Value="@(new Size20.Send())" />
                                </FluentButton>
                            </div>
                        </div>
                    </FluentStack>
                </FluentStack>
                @if (DisplayMemberList)
                {
                    <FluentStack Orientation="Orientation.Vertical"
                                    Style="height: 100%; width: 28em; overflow-y: auto; border-left: solid 0.1em; scrollbar-width: thin;">
                        <FluentStack Orientation="Orientation.Vertical" Style="padding: 0.5em;">
                            @foreach (var member in Server.Members)
                            {
                                <FluentStack HorizontalAlignment="HorizontalAlignment.Left">
                                    <FluentPersona Image="@(!string.IsNullOrWhiteSpace(member.ProfilePictureUrl)
                                                            ? member.ProfilePictureUrl
                                                            : new Size48.Person().ToDataUri(size: "25px", color: "white"))"
                                                    ImageSize="50px"
                                                    Status="PresenceStatus.Available">
                                    </FluentPersona>
                                    <FluentStack Orientation="Orientation.Vertical">
                                        <FluentStack>
                                            <FluentLabel Style="font-size: 1.1em;" Color="Color.Custom"
                                                CustomColor="@((member.Roles.Count > 0 
                                                            ? member.Roles.FirstOrDefault().HexColour
                                                            : ""))">
                                                    @member.DisplayName
                                            </FluentLabel>
                                            @if (member.UserId == Server.OwnerId)
                                            {
                                                <FluentIcon Id="serverOwner" Value="@(new Size20.Crown())" />
                                                <FluentTooltip Anchor="serverOwner">
                                                    @Localizer["ServerOwner"]
                                                </FluentTooltip>
                                            }
                                        </FluentStack>
                                        <FluentLabel>@member.Status</FluentLabel>
                                    </FluentStack>
                                </FluentStack>
                            }
                        </FluentStack>
                    </FluentStack>
                }
            </FluentStack>
        }
        else
        {
            <FluentStack HorizontalAlignment="HorizontalAlignment.Center" Style="margin-top: 1em;">
                <FluentIcon Value="@(new Size28.Info())" Color="Color.Error" />
                <FluentLabel Typo="Typography.H4">
                    @Localizer["NoViewChannelsPermission"]
                </FluentLabel>
            </FluentStack>
        }
    }
}

@code {
    [Parameter]
    public string? ServerId { get; set; }
    [Parameter]
    public string? ChannelId { get; set; }
    public bool IsLoading { get; set; } = true;
    public Server? Server { get; set; }
    public Channel? Channel { get; set; }
    public ChatMessage NewMessage { get; set; } = new();
    public string? UserId { get; set; }
    public int TimeZoneOffset { get; set; }
    public string? TitleString { get; set; }
    public bool DisplayMemberList = false;
    private string? OpenPopoverId { get; set; }
    public List<ServerPermission> Permissions = [];
    private ElementReference NewMessageRef;
    private Dictionary<string, string> Files { get; set; } = [];
    private Dictionary<string, bool> FilesUploaded { get; set; } = [];
    private FluentInputFile? MessageFileUpload = default!;
    private bool FileUploadInProcess { get; set; }
    private int UploadPercentage;
    private string UploadTitle;
    private int MaxFileCount = 10;

    protected override void OnInitialized()
    {
        ChatHubService.ChannelMessageReceived += OnChannelMessageReceived;
        ChatHubService.MemberUpdateReceived += OnMemberUpdateReceived;
        ChatHubService.ServerRoleUpdateReceived += OnServerRoleUpdated;
        ChatHubService.ServerRoleMembersUpdateReceived += OnServerRoleMembersUpdated;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await ASP.GetAuthenticationStateAsync();
        UserId = authState.User.Claims.Where(c => c.Type.Contains("nameidentifier")).First().Value;
        TimeZoneOffset = await JS.InvokeAsync<int>("timeZoneHelper.getTimeZone");
        if (string.IsNullOrWhiteSpace(ServerId) || string.IsNullOrWhiteSpace(ChannelId))
        {
            return;
        }
        Server = await ServerService.GetServerByIdAsync(ServerId);
        if (Server == null || Server.Members.All(m => m.UserId != UserId))
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        Server.Members = Server.Members.OrderBy(m => m.DisplayName).ToList();
        Channel = Server?.ChannelClasses.SelectMany(cc => cc.Channels).FirstOrDefault(c => c.Id == ChannelId);
        if (Channel == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        TitleString = $"CA | #{Channel!.Name} | {Server!.Name}";
        Channel.Messages ??= [];
        await JS.InvokeVoidAsync("titleHelper.setTitle", TitleString);
        Permissions = Server.Members.FirstOrDefault(m => m.UserId == UserId).Roles.SelectMany(r => r.Permissions).ToList();

        IsLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("chatScroll.initializeScrollWatcher", "channelMessageView");
            await JS.InvokeVoidAsync("chatScroll.scrollToBottom", "endOfMessages");
        }
    }

    private void OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {
        UploadPercentage = MessageFileUpload.ProgressPercent;
        UploadTitle = Localizer["Completed"];
        FileUploadInProcess = false;
    }

    private async Task OnFileProgress(FluentInputFileEventArgs file)
    {
        FileUploadInProcess = true;
        var fileCount = file.AllFiles.Count();
        var index = file.Index + 1;
        var fileName = file.Name;
        UploadPercentage = file.ProgressPercent;
        UploadTitle = Localizer["FileUploadTitle", Localizer["Loading"], index, fileCount, fileName];
        var savePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "temp", fileName);

        if (!Files.ContainsKey(fileName))
        {
            Files.Add(fileName, Path.Combine("temp", fileName));
        }

        for (var i = file.Index; i < file.AllFiles.Count(); i++)
        {
            var allFile = file.AllFiles.ElementAt(i);
            if (!FilesUploaded.ContainsKey(allFile.Name))
            {
                FilesUploaded.Add(allFile.Name, false);
            }
        }

        await file.Buffer.AppendToFileAsync(savePath);
    }

    private void OnFileUploaded(FluentInputFileEventArgs file)
    {
        FilesUploaded[file.Name] = true;
    }

    private void OnFileCountExceeded(int amount)
    {
        ToastService.ShowError(Localizer["MessageFileCountExceeded", MaxFileCount, amount]);
    }

    private async Task AutoGrow(ChangeEventArgs _)
    {
        await JS.InvokeVoidAsync("autoGrow", NewMessageRef);
    }

    private async void OnChannelMessageReceived(string serverId, string channelId, ChatMessage message)
    {
        if (Channel != null && channelId == Channel.Id)
        {
            Channel.Messages.Add(message);
            await InvokeAsync(StateHasChanged);
            await Task.Delay(100);
            try
            {
                bool autoScroll = await JS.InvokeAsync<bool>("chatScroll.shouldScroll", "channelMessageView");
                if (autoScroll)
                {
                    await JS.InvokeVoidAsync("chatScroll.scrollToBottom", "endOfMessages");
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }

    private async void OnMemberUpdateReceived(string serverId, ServerUpdateType updateType, ServerProfile member)
    {
        if (ServerId != serverId)
        {
            return;
        }
        switch (updateType)
        {
            case ServerUpdateType.MemberJoined:
                if (Server != null && !Server.Members.Any(m => m.UserId == member.UserId))
                {
                    Server.Members.Add(member);
                    Server.Members = Server.Members.OrderBy(m => m.DisplayName).ToList();
                }
                await InvokeAsync(StateHasChanged);
                break;
            case ServerUpdateType.MemberLeft:
                if (Server != null)
                {
                    Server.Members.RemoveAll(m => m.Id == member.Id);
                }
                await InvokeAsync(StateHasChanged);
                break;
            case ServerUpdateType.MemberKicked:
                if (Server != null)
                {
                    Server.Members.RemoveAll(m => m.Id == member.Id);
                    if (member.UserId == UserId)
                    {
                        NavigationManager.NavigateTo("/");
                    }
                }
                await InvokeAsync(StateHasChanged);
                break;
        }
    }

    private async void OnServerRoleUpdated(
        string serverId, ServerUpdateType updateType, ServerRole role)
    {
        if (ServerId != serverId)
        {
            return;
        }
        var existingRole = Server.Roles.FirstOrDefault(r => r.Id == role.Id);
        var userRole = Server.Members.FirstOrDefault(m => m.UserId == UserId)
                        .Roles.FirstOrDefault(r => r.Id == role.Id);
        switch (updateType)
        {
            case ServerUpdateType.RoleUpdated:
                if (existingRole != null)
                {
                    existingRole.Name = role.Name;
                    existingRole.HexColour = role.HexColour;
                    existingRole.Hierarchy = role.Hierarchy;
                    existingRole.DisplaySeparately = role.DisplaySeparately;
                    existingRole.Permissions = [.. role.Permissions];
                }
                if (userRole != null)
                {
                    userRole.Name = role.Name;
                    userRole.HexColour = role.HexColour;
                    userRole.Hierarchy = role.Hierarchy;
                    userRole.DisplaySeparately = role.DisplaySeparately;
                    userRole.Permissions = [.. role.Permissions];
                }
                Server.Roles = [.. Server.Roles.OrderBy(r => r.Hierarchy)];
                foreach (var member in Server.Members)
                {
                    member.Roles = [.. member.Roles.OrderBy(r => r.Hierarchy)];
                }
                break;
        }
        Permissions = Server.Members.FirstOrDefault(m => m.UserId == UserId).Roles.SelectMany(r => r.Permissions).ToList();

        await InvokeAsync(StateHasChanged);
    }

    private async void OnServerRoleMembersUpdated(
        string serverId, ServerRole role, RoleMemberLinking linking)
    {
        if (ServerId != serverId)
        {
            return;
        }
        var addedMemberIds = linking.NewMembers.Select(m => m.UserId).ToList();
        var removedMemberIds = linking.RemovedMembers.Select(m => m.UserId).ToList();
        var membersToUpdate = Server.Members.Where(m => addedMemberIds.Contains(m.UserId)).ToList();
        membersToUpdate.AddRange(Server.Members.Where(m => removedMemberIds.Contains(m.UserId)));
        foreach (var member in membersToUpdate)
        {
            if (addedMemberIds.Contains(member.UserId) && member.Roles.All(r => r.Id != role.Id))
            {
                member.Roles.Add(role);
            }
            if (removedMemberIds.Contains(member.UserId))
            {
                member.Roles.RemoveAll(r => r.Id == role.Id);
            }
            member.Roles = [.. member.Roles.OrderBy(r => r.Hierarchy)];
        }
        SetPermissions();

        await InvokeAsync(StateHasChanged);
    }

    public void SetPermissions()
    {
        Permissions = Server.Members.FirstOrDefault(m => m.UserId == UserId).Roles.SelectMany(r => r.Permissions).ToList();
    }

    private async Task SendMessageAsync()
    {
        if (string.IsNullOrWhiteSpace(NewMessage.Content) && !Files.Any())
            return;
        if (string.IsNullOrWhiteSpace(ServerId) || string.IsNullOrWhiteSpace(ChannelId) || Channel == null)
            return;
        NewMessage.Id = Guid.CreateVersion7().ToString();
        NewMessage.SentAt = DateTimeOffset.UtcNow;
        NewMessage.PartitionKey = $"ChatMessage-{ServerId}";
        NewMessage.Channel = new () {
            Id = ChannelId,
            Name = Channel.Name,
            ServerId = Channel.ServerId,
            ChannelClassId = Channel.ChannelClassId,
            Description = Channel.Description,
            IsPrivate = Channel.IsPrivate,
            OrderNumber = Channel.OrderNumber,
            CreatedAt = Channel.CreatedAt,
        };
        NewMessage.Sender = Server!.Members.FirstOrDefault(m => m.UserId == UserId)!;

        if (Files.Any())
        {
            FileUploadList fileUpload = new()
            {
                BlazorFiles = Files,
                Origin = FileUploadOrigin.BlazorFluentUI
            };

            var fileUrls = await MediaService.UploadPostMediaAsync(fileUpload, NewMessage.Id);

            NewMessage.Attachments = [.. fileUrls];
        }

        var messageResult = await CosmosDbService.SaveMessageAsync(NewMessage);
        if (!messageResult.Succeeded)
        {
            ToastService.ShowError(Localizer["SavingMessageError"]);
            Console.WriteLine(messageResult.ErrorMessage);
            return;
        }
        var result = await ChatHubService.SendMessageAsync(ServerId, ChannelId, NewMessage);

        if (!result.Succeeded)
        {
            ToastService.ShowError(Localizer["SendingMessageError"]);
            Console.WriteLine(result.ErrorMessage);
            return;
        }

        foreach (var file in Files)
        {
            File.Delete(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "temp", file.Key));
        }
        Files.Clear();
        FilesUploaded.Clear();
        UploadPercentage = 0;
        UploadTitle = string.Empty;

        NewMessage = new();
    }

    private void OnPopoverOpenChanged(string popoverId, bool isOpen)
    {
        if (isOpen)
            OpenPopoverId = popoverId;
        else if (OpenPopoverId == popoverId)
            OpenPopoverId = null;
    }

    public void Dispose()
    {
        foreach (var file in Files)
        {
            try
            {
                File.Delete(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "temp", file.Key));
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Error deleting temporary file: {FileName}", file.Key);
            }
        }
        ChatHubService.ChannelMessageReceived -= OnChannelMessageReceived;
        ChatHubService.MemberUpdateReceived -= OnMemberUpdateReceived;
        ChatHubService.ServerRoleUpdateReceived -= OnServerRoleUpdated;
        ChatHubService.ServerRoleMembersUpdateReceived -= OnServerRoleMembersUpdated;
    }
}