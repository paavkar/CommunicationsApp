@using static CommunicationsApp.Models.Enums
@rendermode InteractiveServer

@inject CommunicationsHubService CommunicationsHubService
@inject IStringLocalizer<CommunicationsAppLoc> Localizer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider ASP
@inject IServerService ServerService
@inject IDialogService DialogService
@inject IUserService UserService

@if (LoadingState.IsLoading)
{
    <FluentStack Style="width: 100%; height: 100%; justify-content: center; align-items: center;">
        <FluentProgressRing></FluentProgressRing>
    </FluentStack>
}
else
{
    if (Server != null && Server.ChannelClasses.Any())
    {
        <FluentStack Id="ChannelListServerActions" Style="position: sticky; top: 0em; z-index: 6;">
            <FluentCard Style="padding: 0em; height: 4em; border-radius: 0;">
                <FluentButton Id="btnOpenServerMenu"
                        Style="width: 100%; height: 100%; justify-content: left;"
                        Appearance="Appearance.Stealth"
                        OnClick="@(() => OpenServerMenu = !OpenServerMenu)"
                            IconEnd="@(!OpenServerMenu ? new Size20.ChevronDown() : new Size20.Dismiss())">
                    @Server.Name
                </FluentButton>
                <FluentMenu UseMenuService="true"
                        @bind-Open="OpenServerMenu"
                        Anchor="btnOpenServerMenu"
                        VerticalThreshold="200"
                        HorizontalPosition="HorizontalPosition.Center">
                    <FluentMenuItem OnClick="@OpenInvitationModalAsync">
                        @Localizer["InvitePeople"]
                        <FluentIcon Value="@(new Size20.PeopleAdd())" Slot="end" />
                    </FluentMenuItem>
                    @if (!IsServerOwner)
                    {
                        <FluentDivider />
                        <FluentMenuItem OnClick="@LeaveServerAsync">
                            <FluentLabel Color="Color.Error">@Localizer["LeaveServer"]</FluentLabel>
                            <FluentIcon Value="@(new Size20.DoorArrowRight())" Color="Color.Error" Slot="end" />
                        </FluentMenuItem>
                    }
                    
                </FluentMenu>
            </FluentCard>
        </FluentStack>

        <FluentStack Orientation="Orientation.Vertical" Id="ChannelListChannels"
                     Style="width: 100%; flex-grow: 1; height: 100%; overflow-y: auto; scrollbar-width: thin;">
            <FluentNavMenu @bind-Expanded="@ChannelClassesExpanded">
                @foreach (var channelClass in Server.ChannelClasses)
                {
                    <FluentNavGroup Title="@channelClass.Name" Expanded="true">
                        @foreach (var channel in channelClass.Channels)
                        {
                            <FluentNavLink Href="@($"channels/{Server.Id}/{channel.Id}")">
                                @channel.Name
                            </FluentNavLink>
                        }
                    </FluentNavGroup>
                }
            </FluentNavMenu>
        </FluentStack>
    }
}

@code {
    [Parameter]
    public string? ServerId { get; set; }
    public string? UserId { get; set; }
    public Server? Server { get; set; }
    public ApplicationUser? User { get; set; }
    public bool IsServerOwner { get; set; } = false;
    public bool OpenServerMenu = false;
    public bool ChannelClassesExpanded = true;
    public LoadingState LoadingState { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await ASP.GetAuthenticationStateAsync();
        UserId = authState.User.Claims.Where(c => c.Type.Contains("nameidentifier")).First().Value;
        if (!string.IsNullOrEmpty(ServerId) && !string.IsNullOrEmpty(UserId))
        {
            Server = await ServerService.GetServerByIdAsync(ServerId, UserId);
            if (Server is null)
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
                return;
            }
            User = await UserService.GetUserByIdAsync(UserId);
            IsServerOwner = Server.OwnerId == UserId;
            LoadingState.IsLoading = false;
        }
    }

    private async Task OpenInvitationModalAsync()
    {
        var dialog = await DialogService.ShowDialogAsync<ServerInvitationModal>(Server, new DialogParameters()
        {
            Title = $"{Localizer["InvitePeopleTo"]} {Server.Name}",
            Height = "25em",
        });
    }

    private async void LeaveServerAsync()
    {
        if (Server != null)
        {
            var dialog = await DialogService.ShowConfirmationAsync(
                $"{Localizer["LeaveServerConfirmation"]} {Server.Name}?",
                Localizer["Leave"],
                Localizer["Cancel"],
                Localizer["LeaveServer"]
            );
            var dialogResult = await dialog.Result;
            if (dialogResult.Cancelled)
            {
                return;
            }
            var result = await ServerService.LeaveServerAsync(Server.Id, UserId);
            if (result.Succeeded)
            {
                var serverProfile = Server.Members.FirstOrDefault(m => m.UserId == UserId);
                if (serverProfile != null)
                {
                    await CommunicationsHubService.LeaveBroadcastChannelAsync(Server.Id);
                    foreach (var channel in Server.ChannelClasses.SelectMany(cc => cc.Channels))
                    {
                        await CommunicationsHubService.LeaveBroadcastChannelAsync(channel.Id);
                    }
                    Server = await ServerService.GetServerByIdAsync(Server.Id, UserId);
                    Server.Members.RemoveAll(sp => sp.Id == serverProfile.Id);
                    await ServerService.UpdateCacheAsync(Server.Id, Server);
                    User.ServerProfiles.RemoveAll(sp => sp.ServerId == Server.Id);
                    var removed = User.Servers.RemoveAll(s => s.Id == Server.Id);
                    await UserService.UpdateCacheAsync(User);
                    await CommunicationsHubService.NotifyMemberUpdateAsync(
                        Server.Id,
                        ServerUpdateType.MemberLeft,
                        serverProfile
                    );
                }
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                Console.WriteLine("Failed to leave server.");
            }
        }
    }
}
