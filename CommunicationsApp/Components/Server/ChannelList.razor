@rendermode InteractiveServer

@inject IServerService ServerService
@inject IJSRuntime JS

@if (Server != null && Server.ChannelClasses.Any())
{
    <nav class="nav flex-column">
        @foreach (var channelClass in Server.ChannelClasses)
        {
            <div>
                <h4>@channelClass.Name</h4>
                    @foreach (var channel in channelClass.Channels)
                    {
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="@($"channels/{Server.Id}/{channel.Id}")">
                                @channel.Name
                            </NavLink>
                        </div>
                    }
            </div>
        }
    </nav>
}

@code {
    [Parameter]
    public string? ServerId { get; set; }
    public string? UserId { get; set; }
    public Server? Server { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UserId = await JS.InvokeAsync<string>("localStorageHelper.getItem", "userId");
            if (!string.IsNullOrEmpty(ServerId) && !string.IsNullOrEmpty(UserId))
            {
                Server = await ServerService.GetServerByIdAsync(ServerId, UserId);
                StateHasChanged();
            }
        }
    }
}
