@implements IDisposable
@using CommunicationsApp.Components.Server

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager NavigationManager
@inject IdentityUserAccessor UserAccessor
@inject AuthenticationStateProvider ASP
@inject ChatHubService ChatHubService
@inject IServerService ServerService
@inject IUserService UserService
@inject IJSRuntime JS

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<FluentStack Orientation="Orientation.Vertical" Style="width: 30em; height: 100%; overflow: hidden;" VerticalGap="0">
    <FluentStack Style="width: 100%; flex-grow: 1; overflow: hidden; height: 100%;" HorizontalGap="0"
        onclick="document.querySelector('.navbar-toggler').click()">
        <nav class="nav flex-column overflow-x-hidden w-25" style="overflow-y: auto; height: 100%; border-right: solid 0.1em;">
            <AuthorizeView>
                <Authorized>
                    <FluentStack Orientation="Orientation.Vertical" Style="flex-grow: 1; overflow-y: auto;">
                        @if (User != null && User.Servers.Any())
                        {
                            foreach (var server in User.Servers)
                            {
                                <FluentButton BackgroundColor="rgba(0,0,0,0)" Style="margin: 0 auto;" Id="btnServerButton"
                                    Title="@server.Name"
                                    OnClick="@(() => NavigationManager.NavigateTo($"channels/{server.Id}/{server.ChannelClasses.First().Channels.First().Id}"))">
                                    @if (!string.IsNullOrEmpty(server.IconUrl))
                                    {
                                        <img src="@server.IconUrl" alt="@server.Name" width="50" />
                                    }
                                    else
                                    {
                                        <FluentLabel>
                                            @(
                                                string.Concat(server.Name
                                                  .Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)
                                                  .Select(word => char.ToUpper(word[0])))
                                            )
                                        </FluentLabel>
                                    }
                                </FluentButton>
                            }
                        }
                        <AddServer />
                    </FluentStack>
                
                </Authorized>
                <NotAuthorized>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Account/Register">
                            <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Account/Login">
                            <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                        </NavLink>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </nav>
        <FluentStack Orientation="Orientation.Vertical" Style="overflow-y: auto; height: 100%;">
            @if (ChannelView)
            {
                <ChannelList @key="@ServerId" ServerId="@ServerId" />
            }
        </FluentStack>
    </FluentStack>
    <AuthorizeView>
        <Authorized>
            <FluentStack Style="position: sticky; bottom: 0; z-index: 10;">
                <FluentCard Height="5em" Width="24.4em" Style="padding: 10px; margin: 0 0.4em 0.4em">
                    <FluentStack>
                            <FluentPersona Image="@(!string.IsNullOrEmpty(User?.ProfilePictureUrl)
                                                    ? User.ProfilePictureUrl
                                                    : new Size48.Person().ToDataUri(size: "25px", color: "white"))"
                                            ImageSize="50px"
                                            Status="PresenceStatus.Available">
                            </FluentPersona>
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentLabel>@User?.DisplayName</FluentLabel>
                                <FluentLabel>@User?.Status</FluentLabel>
                            </FluentStack>
                    </FluentStack>
                </FluentCard>
            </FluentStack>
        </Authorized>
    </AuthorizeView>
</FluentStack>


@code {
    private string? currentUrl;
    public ApplicationUser? User { get; set; }
    public bool ChannelView { get; set; }
    public string ServerId { get; set; }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await ChatHubService.StartAsync();
        await ChatHubService.JoinChannelAsync("dataReady");
        ChatHubService.ChannelMessageReceived += OnChannelMessageReceived;
        var authState = await ASP.GetAuthenticationStateAsync();
        User = await UserAccessor.GetRequiredUserFromPrincipalAsync(authState.User);

        if (User != null)
        {
            User = await UserService.GetUserByIdAsync(User.Id);
            await JS.InvokeVoidAsync("localStorageHelper.setItem", "userId", User.Id);

            foreach (var server in User.Servers)
            {
                foreach (var channelClass in server.ChannelClasses)
                {
                    foreach (var channel in channelClass.Channels)
                    {
                        await ChatHubService.JoinChannelAsync(channel.Id!);
                    }
                }
            }

            await ChatHubService.NotifyDataReadyAsync("dataReady", "mainLayout");

            StateHasChanged();
        }
    }

    private async void OnChannelMessageReceived(string serverId, string channelId, ChatMessage message)
    {
        var server = await ServerService.GetServerByIdAsync(serverId, User.Id);
        if (server != null)
        {
            var channel = server.ChannelClasses
                                .SelectMany(cc => cc.Channels)
                                .FirstOrDefault(c => c.Id == channelId);
            if (channel != null)
            {
                channel.Messages.Add(message);
            }
            await ServerService.UpdateCacheAsync(serverId, server);

            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        var serverAndChannelId = currentUrl.Substring(currentUrl.IndexOf('/') + 1).Split('/');
        if (serverAndChannelId.Length > 1)
        {
            ChannelView = true;
            ServerId = serverAndChannelId[0];
        }
        else
        {
            ChannelView = false;
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        ChatHubService.ChannelMessageReceived -= OnChannelMessageReceived;
    }
}