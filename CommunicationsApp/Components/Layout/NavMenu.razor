@implements IDisposable

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager NavigationManager
@inject IdentityUserAccessor UserAccessor
@inject AuthenticationStateProvider ASP
@inject ChatHubService ChatHubService
@inject IServerService ServerService
@inject IUserService UserService
@inject IJSRuntime JS

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <AuthorizeView>
            <Authorized>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
                    @if (User != null && User.Servers.Any())
                    {
                        foreach (var server in User.Servers)
                        {
                            <div class="nav-item px-3">
                                <NavLink class="nav-link"
                                            href="@($"channels/{server.Id}/{server.ChannelClasses.First().Channels.First().Id}")">
                                    <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @server.Name
                                </NavLink>
                            </div>
                        }
                    }

                    <AddServer />
                    
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Account/Manage">
                            <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <button type="submit" class="nav-link">
                                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                            </button>
                        </form>
                    </div>
                </FluentStack>
                
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;
    public ApplicationUser? User { get; set; }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        var serverAndChannelId = currentUrl.Substring(currentUrl.IndexOf('/') + 1).Split('/');
    }

    protected override async Task OnInitializedAsync()
    {
        await ChatHubService.StartAsync();
        await ChatHubService.JoinChannelAsync("dataReady");
        ChatHubService.ChannelMessageReceived += OnChannelMessageReceived;
        var authState = await ASP.GetAuthenticationStateAsync();
        User = await UserAccessor.GetRequiredUserFromPrincipalAsync(authState.User);

        if (User != null)
        {
            User = await UserService.GetUserByIdAsync(User.Id);
            await JS.InvokeVoidAsync("localStorageHelper.setItem", "userId", User.Id);

            foreach (var server in User.Servers)
            {
                foreach (var channelClass in server.ChannelClasses)
                {
                    foreach (var channel in channelClass.Channels)
                    {
                        await ChatHubService.JoinChannelAsync(channel.Id!);
                    }
                }
            }

            await ChatHubService.NotifyDataReadyAsync("dataReady", "mainLayout");

            StateHasChanged();
        }
    }

    private async void OnChannelMessageReceived(string serverId, string channelId, ChatMessage message)
    {
        var server = await ServerService.GetServerByIdAsync(serverId, User.Id);
        if (server != null)
        {
            var channel = server.ChannelClasses
                                .SelectMany(cc => cc.Channels)
                                .FirstOrDefault(c => c.Id == channelId);
            if (channel != null)
            {
                channel.Messages.Add(message);
            }
            await ServerService.UpdateCacheAsync(serverId, server);

            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        ChatHubService.ChannelMessageReceived -= OnChannelMessageReceived;
    }
}