@implements IDisposable
@using CommunicationsApp.Components.Server
@using static CommunicationsApp.Models.Enums

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IStringLocalizer<CommunicationsAppLoc> Localizer
@inject CommunicationsHubService ChatHubService
@inject NavigationManager NavigationManager
@inject IdentityUserAccessor UserAccessor
@inject AuthenticationStateProvider ASP
@inject IServerService ServerService
@inject IUserService UserService

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<FluentStack Orientation="Orientation.Vertical" Style="min-width: 28em; width: 28em; height: 100%; overflow: hidden;"
    VerticalGap="0">
    @if (IsLoading)
    {
        <FluentStack Style="flex-grow: 1; display: flex; justify-content: center; align-items: center; height: 100%;">
            <FluentProgressRing />
        </FluentStack>
    }
    else
    {
        <FluentStack Style="width: 100%; flex-grow: 1; overflow: hidden; height: 100%;" HorizontalGap="0"
                     onclick="document.querySelector('.navbar-toggler').click()">
            <nav class="nav flex-column overflow-x-hidden"
                 style="overflow-y: auto; height: 100%; border-right: solid 0.1em; min-width: 5em;">
                <AuthorizeView>
                    <Authorized>
                        <FluentStack Orientation="Orientation.Vertical"
                                     Style="flex-grow: 1; overflow-y: auto; scrollbar-width: none; padding-top: 10px;">
                            @if (User != null && User.Servers.Any())
                            {
                                foreach (var server in User.Servers)
                                {
                                    var buttonId = $"btnServerButton-{server.Id}";
                                    <FluentCard Style="display: flex; padding: 0; height: 3.5em; width: 3.5em; margin: 0 auto;
                                                                justify-content: center;">
                                        <FluentButton BackgroundColor="rgba(0,0,0,0)" Id="@buttonId"
                                                      Style="padding: 0; align-self: center;"
                                                      OnClick="@(() => NavigationManager.NavigateTo($"channels/{server.Id}/{server.ChannelClasses.First().Channels.First().Id}"))">
                                            <FluentTooltip Anchor="@buttonId" Position="TooltipPosition.Right">
                                                @server.Name
                                            </FluentTooltip>
                                            @if (!string.IsNullOrWhiteSpace(server.IconUrl))
                                            {
                                                <img src="@server.IconUrl" alt="@server.Name" width="50" />
                                            }
                                            else
                                            {
                                                <FluentLabel>
                                                    @(
                                                        string.Concat(server.Name
                                                        .Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)
                                                        .Select(word => char.ToUpper(word[0])))
                                                    )
                                                </FluentLabel>
                                            }
                                        </FluentButton>
                                    </FluentCard>
                                }
                            }
                            <AddServer ServerPermissionsExist="@ServerPermissionsExist" />
                        </FluentStack>
                    </Authorized>
                </AuthorizeView>
            </nav>
            <FluentStack Orientation="Orientation.Vertical" Style="height: 100%; width: 23em; min-width: 23em;" VerticalGap="0">
                @if (ChannelView)
                {
                    <ChannelList @key="@ServerId" ServerId="@ServerId" />
                }
            </FluentStack>
        </FluentStack>
        <AuthorizeView>
            <Authorized>
                <FluentStack Style="position: sticky; bottom: 0; z-index: 10;">
                    <FluentCard Height="5em" Width="100%" Style="padding: 10px; margin: 0 0.4em 0.4em">
                        <FluentStack>
                            <FluentPersona Image="@(!string.IsNullOrWhiteSpace(User?.ProfilePictureUrl)
                                                    ? User.ProfilePictureUrl
                                                    : new Size48.Person().ToDataUri(size: "25px", color: "white"))"
                                       ImageSize="50px"
                                       Status="PresenceStatus.Available">
                            </FluentPersona>
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentLabel Weight="FontWeight.Bold" Style="font-size: 1.1em;">@User?.DisplayName</FluentLabel>
                                <FluentLabel>@User?.Status</FluentLabel>
                            </FluentStack>
                            <FluentSpacer />
                            <FluentStack HorizontalAlignment="HorizontalAlignment.End">
                                @if (RenderMenu)
                                {
                                    <FluentMenu UseMenuService="true"
                                                @bind-Open="OpenSettingsMenu"
                                                Anchor="btnOpenSettings">
                                        <FluentMenuItem>
                                            <form action="Account/Logout" method="post">
                                                <AntiforgeryToken />
                                                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                                <FluentButton BackgroundColor="rgba(0,0,0,0)"
                                                                IconStart="@(new Size20.SignOut())" Type="ButtonType.Submit">
                                                    @Localizer["LogOut"]
                                                </FluentButton>
                                            </form>
                                        </FluentMenuItem>
                                    </FluentMenu>
                                }
                                <FluentTooltip Anchor="btnOpenSettings" Position="TooltipPosition.Top">
                                    @Localizer["OpenSettings"]
                                </FluentTooltip>
                                <FluentButton Id="btnOpenSettings" BackgroundColor="rgba(0,0,0,0)"
                                                OnClick="@(() => OpenSettingsMenu = !OpenSettingsMenu)">
                                    <FluentIcon Value="@(new Size24.Settings())" />
                                </FluentButton>
                            </FluentStack>
                        </FluentStack>
                    </FluentCard>
                </FluentStack>
            </Authorized>
        </AuthorizeView>
    }
</FluentStack>

@code {
    private string? currentUrl;
    public ApplicationUser? User { get; set; }
    public bool ChannelView { get; set; }
    public string ServerId { get; set; }
    public string UserId { get; set; }
    public bool OpenSettingsMenu { get; set; } = false;
    public bool RenderMenu { get; set; } = false;
    public bool IsLoading = true;
    public bool ServerPermissionsExist { get; set; }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await ChatHubService.StartAsync();
        ChatHubService.ChannelMessageReceived += OnChannelMessageReceived;
        ChatHubService.MemberUpdateReceived += OnMemberUpdateReceived;
        ChatHubService.ChannelClassUpdateReceived += OnChannelClassUpdateReceived;
        ChatHubService.ChannelUpdateReceived += OnChannelUpdateReceived;
        var authState = await ASP.GetAuthenticationStateAsync();
        UserId = authState.User.Claims.Where(c => c.Type.Contains("nameidentifier")).First().Value;

        if (UserId != null)
        {
            User = await UserService.GetUserByIdAsync(UserId);
            
            foreach (var server in User.Servers)
            {
                await ChatHubService.JoinBroadcastChannelAsync(server.Id!);
                foreach (var channelClass in server.ChannelClasses)
                {
                    foreach (var channel in channelClass.Channels)
                    {
                        await ChatHubService.JoinBroadcastChannelAsync(channel.Id!);
                    }
                }
            }
        }
        var serverPermissions = await ServerService.GetServerPermissionsAsync();
        ServerPermissionsExist = serverPermissions.Count > 0
            ? true
            : false;
        IsLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RenderMenu = true;
            var serverAndChannelId = currentUrl.Substring(currentUrl.IndexOf('/') + 1).Split('/');
            if (serverAndChannelId.Length > 1)
            {
                ChannelView = true;
                ServerId = serverAndChannelId[0];
            }
            else
            {
                ChannelView = false;
            }
            StateHasChanged();
        }
    }

    private async void OnChannelMessageReceived(string serverId, string channelId, ChatMessage message)
    {
        var server = await ServerService.GetServerByIdAsync(serverId);
        if (server != null)
        {
            var channel = server.ChannelClasses
                                .SelectMany(cc => cc.Channels)
                                .FirstOrDefault(c => c.Id == channelId);
            if (channel != null)
            {
                channel.Messages.Add(message);
            }
            await ServerService.UpdateCacheAsync(serverId, server);

            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnMemberUpdateReceived(string serverId, ServerUpdateType updateType, ServerProfile member)
    {
        switch (updateType)
        {
            case ServerUpdateType.MemberJoined:
                var server = User.Servers.FirstOrDefault(s => s.Id == serverId);
                if (server is not null && !server.Members.Any(m => m.Id == member.Id))
                {
                    server.Members.Add(member);
                    await UserService.UpdateCacheAsync(User);
                }
                break;
            case ServerUpdateType.MemberLeft:
                var serverToUpdate = User.Servers.FirstOrDefault(s => s.Id == serverId);
                if (serverToUpdate is not null)
                {
                    serverToUpdate.Members.RemoveAll(m => m.Id == member.Id);
                    await UserService.UpdateCacheAsync(User);
                }
                break;
        }
    }

    private async void OnChannelClassUpdateReceived(string serverId, ServerUpdateType updateType, ChannelClass cc)
    {
        var server = User.Servers.FirstOrDefault(s => s.Id == serverId);
        switch (updateType)
        {
            case ServerUpdateType.ChannelClassAdded:
                if (server is not null && !server.ChannelClasses.Any(m => m.Id == cc.Id))
                {
                    if (cc.Channels is not null)
                    {
                        foreach (var channel in cc.Channels)
                        {
                            await ChatHubService.JoinBroadcastChannelAsync(channel.Id!);
                        }
                    }
                    server.ChannelClasses.Add(cc);
                    await UserService.UpdateCacheAsync(User);
                }
                break;
            case ServerUpdateType.ChannelClassRemoved:
                if (server is not null)
                {
                    foreach (var channel in cc.Channels)
                    {
                        await ChatHubService.LeaveBroadcastChannelAsync(channel.Id!);
                    }
                    server.ChannelClasses.RemoveAll(m => m.Id == cc.Id);
                    await UserService.UpdateCacheAsync(User);
                }
                break;
        }
    }

    private async void OnChannelUpdateReceived(string serverId, ServerUpdateType updateType, Channel c)
    {
        var channelClass = User.Servers.FirstOrDefault(s => s.Id == serverId)?.ChannelClasses.FirstOrDefault(cc => cc.Id == c.ChannelClassId);
        switch (updateType)
        {
            case ServerUpdateType.ChannelAdded:
                if (channelClass is not null && !channelClass.Channels.Any(m => m.Id == c.Id))
                {
                    await ChatHubService.JoinBroadcastChannelAsync(c.Id!);
                    channelClass.Channels.Add(c);
                    await UserService.UpdateCacheAsync(User);
                }
                break;
            case ServerUpdateType.ChannelRemoved:
                if (channelClass is not null)
                {
                    await ChatHubService.LeaveBroadcastChannelAsync(c.Id!);
                    channelClass.Channels.RemoveAll(m => m.Id == c.Id);
                    await UserService.UpdateCacheAsync(User);
                }
                break;
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        var serverAndChannelId = currentUrl.Substring(currentUrl.IndexOf('/') + 1).Split('/');
        if (serverAndChannelId.Length > 1)
        {
            ChannelView = true;
            ServerId = serverAndChannelId[0];
        }
        else
        {
            ChannelView = false;
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        ChatHubService.ChannelMessageReceived -= OnChannelMessageReceived;
        ChatHubService.MemberUpdateReceived -= OnMemberUpdateReceived;
        ChatHubService.ChannelClassUpdateReceived -= OnChannelClassUpdateReceived;
        ChatHubService.ChannelUpdateReceived -= OnChannelUpdateReceived;
    }
}