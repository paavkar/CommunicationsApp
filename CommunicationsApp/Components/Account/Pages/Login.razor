@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CommunicationsApp.Data

@inject IStringLocalizer<CommunicationsAppLoc> Localizer
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject ILogger<Login> Logger

<PageTitle>@Localizer["LogIn"]</PageTitle>

<FluentStack Orientation="Orientation.Vertical" 
    Style="width: 100%; overflow-y: auto;">
    <FluentStack Orientation="Orientation.Vertical" Style="margin: 0 auto; width: 30em;">
        <FluentLabel Typo="Typography.H1" Style="align-self: center;">@Localizer["LogIn"]</FluentLabel>
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>@Localizer["LocalAccount"]</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username"
                        aria-required="true" placeholder="name@example.com" />
                    <label for="Input.Email" class="form-label">@Localizer["EmailOrUsername"]</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control"
                        autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="Input.Password" class="form-label">@Localizer["Password"]</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        @Localizer["RememberMe"]
                    </label>
                </div>
                    <FluentStack>
                        <ExternalLoginPicker />
                    </FluentStack>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">@Localizer["LogIn"]</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">@Localizer["ForgotPassword"]</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                            @Localizer["RegisterAsNew"]
                        </a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">@Localizer["ResendEmailConfirmation"]</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </FluentStack>
</FluentStack>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        ApplicationUser? user;
        if (Input.Email.Contains('@'))
        {
            user = await UserManager.FindByEmailAsync(Input.Email);
        }
        else
        {
            user = await UserManager.FindByNameAsync(Input.Email);
        }
        if (user is null)
        {
            errorMessage = "Error: user not found.";
            return;
        }
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(user!, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            // var queryParameters = new Dictionary<string, object?>() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe };
            // var uriWithoutQuery = NavigationManager.ToAbsoluteUri("Account/LoginWith2fa").GetLeftPart(UriPartial.Path);
            // var newUri = NavigationManager.GetUriWithQueryParameters(uriWithoutQuery, queryParameters);
            // NavigationManager.NavigateTo(newUri);
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            NavigationManager.NavigateTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
