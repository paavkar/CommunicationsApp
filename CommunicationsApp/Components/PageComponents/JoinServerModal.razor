@implements IDialogContentComponent
@inject NavigationManager NavigationManager
@inject IdentityUserAccessor UserAccessor
@inject AuthenticationStateProvider ASP
@inject ChatHubService ChatHubService
@inject IServerService ServerService
@inject IUserService UserService

@* Header *@
<FluentDialogHeader>
    <FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Center"
    HorizontalAlignment="HorizontalAlignment.Center">
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
        <FluentLabel>
            Join an existing server by pasting the invitation below
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween">
        <FluentButton>Go back</FluentButton>
        <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">
            Join server
        </FluentButton>
    </FluentStack>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical" Style="overflow-y: auto">
        <FluentTextField @bind-Value="InvitationCode" Required Style="width: 100%; height: 4em;"
            Placeholder="Server invitation link or code"
            Label="Server invitation" />
        <FluentLabel Typo="Typography.Subject">Invitations should look like the following ones:</FluentLabel>
        <FluentLabel Style="font-size: 0.9em; cursor: default;">
            DpeXAdBQSXe2oyVnSxRGew
        </FluentLabel>
        <FluentLabel Style="font-size: 0.9em; cursor: default;">
            @($"{NavigationManager.BaseUri}DpeXAdBQSXe2oyVnSxRGew")
        </FluentLabel>
        <FluentLabel Style="font-size: 0.9em; cursor: default;">
            @($"{NavigationManager.BaseUri}custom-invitation")
        </FluentLabel>
    </FluentStack>
</FluentDialogBody>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    private string InvitationCode { get; set; } = string.Empty;
    private ApplicationUser User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await ASP.GetAuthenticationStateAsync();
        var UserId = authState.User.Claims.Where(c => c.Type.Contains("nameidentifier")).First().Value;
        User = await UserService.GetUserByIdAsync(UserId);
    }

    private async Task SaveAsync()
    {
        if (string.IsNullOrWhiteSpace(InvitationCode))
        {
            Console.WriteLine("Invitation code cannot be empty.");
            return;
        }
        if (Uri.TryCreate(InvitationCode, UriKind.Absolute, out var uri))
        {
            InvitationCode = uri.Segments.Last();
        }
        if (User.Servers.Any(s => s.InvitationCode == InvitationCode || s.CustomInvitationCode == InvitationCode))
        {
            Console.WriteLine("You are already a member of this server.");
            return;
        }
        
        var result = await ServerService.JoinServerByInvitationCode(InvitationCode, User);

        if (result.Succeeded)
        {
            Server server = result.Server;
            foreach (var channelClass in server.ChannelClasses)
            {
                foreach (var channel in channelClass.Channels)
                {
                    await ChatHubService.JoinChannelAsync(channel.Id);
                }
            }
            var navUrl = $"channels/{server.Id}/{server.ChannelClasses.First()?.Channels.First()?.Id}";
            User.Servers.Add(server);
            await UserService.UpdateCacheAsync(User);
            NavigationManager.NavigateTo(navUrl, forceLoad: true);
            await Dialog.CloseAsync();
        }
    }
}
