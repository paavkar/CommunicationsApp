@implements IDialogContentComponent

@inject IStringLocalizer<CommunicationsAppLoc> Localizer
@inject CommunicationsHubService ChatHubService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider ASP
@inject IServerService ServerService
@inject IDialogService DialogService
@inject IUserService UserService

@* Header *@
<FluentDialogHeader>
    <FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Center"
    HorizontalAlignment="HorizontalAlignment.Center">
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
        <FluentLabel>
            @Localizer["JoinExistingServerPaste"]
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween">
        <FluentButton>@Localizer["GoBack"]</FluentButton>
        <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">
            @Localizer["JoinServer"]
        </FluentButton>
    </FluentStack>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical" Style="overflow-y: auto">
        <FluentTextField @bind-Value="InvitationCode" Required Style="width: 100%;"
                         Placeholder="@Localizer["InvitationCodeOrLink"]"
                         Label="@Localizer["ServerInvitation"]" />
        <FluentLabel Typo="Typography.Subject">@Localizer["InvitationsVisual"]</FluentLabel>
        <FluentLabel Style="font-size: 0.9em; cursor: default;">
            DpeXAdBQSXe2oyVnSxRGew
        </FluentLabel>
        <FluentLabel Style="font-size: 0.9em; cursor: default;">
            @($"{NavigationManager.BaseUri}DpeXAdBQSXe2oyVnSxRGew")
        </FluentLabel>
        <FluentLabel Style="font-size: 0.9em; cursor: default;">
            @($"{NavigationManager.BaseUri}custom-invitation")
        </FluentLabel>
    </FluentStack>
</FluentDialogBody>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    private string InvitationCode { get; set; } = string.Empty;
    private ApplicationUser User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await ASP.GetAuthenticationStateAsync();
        var UserId = authState.User.Claims.Where(c => c.Type.Contains("nameidentifier")).First().Value;
        User = await UserService.GetUserByIdAsync(UserId);
    }

    private async Task SaveAsync()
    {
        if (string.IsNullOrWhiteSpace(InvitationCode))
        {
            Console.WriteLine(Localizer["EmptyInvitation"]);
            return;
        }
        if (Uri.TryCreate(InvitationCode, UriKind.Absolute, out var uri))
        {
            InvitationCode = uri.Segments.Last();
        }
        if (User.Servers.Any(s => s.InvitationCode == InvitationCode || s.CustomInvitationCode == InvitationCode))
        {
            Console.WriteLine(Localizer["AlreadyMember"]);
            return;
        }

        var serverResult = await ServerService.GetServerByInvitationAsync(InvitationCode);
        if (!serverResult.Succeeded)
        {
            return;
        }
        Server server = serverResult.Server;

        var dialog = await DialogService.ShowDialogAsync<JoinServerProfileModal>(server, new DialogParameters()
        {
            Title = $"{Localizer["SetServerProfile"]} {server.Name}"
        });
        await Dialog.CloseAsync();
    }
}
