@implements IDialogContentComponent<Server>

@inject IStringLocalizer<CommunicationsAppLoc> Localizer
@inject CommunicationsHubService CHS
@inject IServerService ServerService

@* Header *@
<FluentDialogHeader>
    <FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Center"
                 HorizontalAlignment="HorizontalAlignment.Center">
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween">
        <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">@Localizer["Save"]</FluentButton>
        <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">@Localizer["Cancel"]</FluentButton>
    </FluentStack>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical" Style="overflow-y: auto;">
        <FluentTextField @bind-Value="ChannelClass.Name" Required
                         Placeholder="@Localizer["NewChannelClass"]" Style="width: 100%;"
                         Label="@Localizer["ChannelClassName"]" />
        <FluentSwitch @bind-Value="ChannelClass.IsPrivate" Label="@Localizer["PrivateClass"]">
            <span slot="checked-message">Private</span>
            <span slot="unchecked-message">Public</span>
        </FluentSwitch>

        <FluentCheckbox @bind-Value="@AddChannel" Label="@Localizer["AddAlsoChannel"]" />
        @if (AddChannel)
        {
            <FluentTextField @bind-Value="Channel.Name" Required
                                Placeholder="@Localizer["NewChannel"]" Style="width: 100%;"
                                Label="@Localizer["ChannelName"]" />
            <FluentTextArea @bind-Value="Channel.Description"
                            Placeholder="@Localizer["OptionalChannelDescription"]" Style="width: 100%;" Rows="4"
                            Label="@Localizer["OptionalChannelDescription"]" />
        }
    </FluentStack>
</FluentDialogBody>

@code {
    [Parameter]
    public Server Content { get; set; } = default!;
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    private ChannelClass ChannelClass { get; set; } = new();
    private Channel Channel { get; set; } = new();
    private bool AddChannel { get; set; } = false;

    private async Task SaveAsync()
    {
        if (Content.ChannelClasses.Any(cc => cc.Name == ChannelClass.Name))
        {
            return;
        }
        if (AddChannel && Content.ChannelClasses.Any(cc => cc.Channels.Any(c => c.Name == Channel.Name)))
        {
            return;
        }
        ChannelClass.ServerId = Content.Id;
        ChannelClass.Id = Guid.CreateVersion7().ToString();
        ChannelClass.OrderNumber = Content.ChannelClasses.Count + 1;

        if (AddChannel)
        {
            Channel.Id = Guid.CreateVersion7().ToString();
            Channel.ServerId = Content.Id;
            Channel.ChannelClassId = ChannelClass.Id;
            Channel.IsPrivate = ChannelClass.IsPrivate;
            Channel.OrderNumber = 1;
        }

        var result = await ServerService.AddChannelClassAsync(ChannelClass);
        if (result.Succeeded)
        {
            if (AddChannel)
            {
                var channelResult = await ServerService.AddChannelAsync(ChannelClass.Id, Channel);
                if (!channelResult.Succeeded)
                {
                    Console.WriteLine(channelResult.ErrorMessage);
                    return;
                }
                ChannelClass.Channels.Add(Channel);
            }
            var signalResult = await CHS.NotifyChannelClassUpdateAsync(Content.Id, ServerUpdateType.ChannelClassAdded, ChannelClass);
            if (!signalResult.Succeeded)
            {
                Console.WriteLine(signalResult.ErrorMessage);
                return;
            }
            var server = await ServerService.GetServerByIdAsync(Content.Id);
            await Dialog.CloseAsync(server);
        }
        else
        {
            Console.WriteLine(result.ErrorMessage);
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CloseAsync();
    }
}
